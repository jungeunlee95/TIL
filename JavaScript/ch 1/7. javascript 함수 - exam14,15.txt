7. javascript 함수 - exam14,15

-------------------------------------------
 함수의 종류   -> 차이점 exam15
1. 선언적 함수 -> 호출을 먼저해도 됨, 함수 선언이 나중에 있어도 됨 시점이 전에
2. 익명함수 -> 반드시 함수 선언 후에 호출할수있음! 시점이 후에
순서 : 선언적 함수를 다 로딩 한 다음에, 익명함수 로딩
-> 만약 같은 이름이면 익명함수가 우선순위! 그래서 익명함수가 호출됨
------------------------------------------
//자바스크립트는 함수 override를 지원하지 않음~
 함수 호출을 함수 이름으로만 구별하기때문에, 매개변수는 전혀 중요하지 않음!!!!!

1. 선언적 함수
 function   -> 나 함수야 !!  + 리턴형, 함수이름(매개변수)
   : 근데 자바스크립트에서는 어차피 다 var형이라 리턴형 생략
  -> 타입도 안쓰고 변수명만 씀

   //선언적 함수 정의
  function testFunction(){
	alert('call....');
  }
  //함수 호출
  testFunction();


------------------익명함수----------------------
---temp사용하면 temp();로 호출해야함
var temp = function func() {
	alert('call func()....');
}	
 temp();  
  -> 이렇게하면 함수 이름이 필요가 없잖아
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
    var func01 = function () {
	alert('call func01()....');
     }	
    func01();

---------call back 함수--------------------
  function callFunction(f){   ->2, 여기 f로 들어가서
	f();                         -> 3. 여기서 fucn01() 함수를 호출 
  }

  callFunction(func01);     -> 1. func01 이

  func01();

--------------------------------------익명함수 --------------
아예 함수를 넣어서 호출할 수 도 있음, 인자로 함수가 날라감
  callbackFunction(function() {
	alert('익명함수호출....');
  });


---------------------------------------함수로 호출 -----
function getSum(a,b){
		var s = 0;
		while(a<=b) {
			s+= a++;
		}
		return s;
	}

function print(a,b){
   alert(a + '~' + b + '사이의 총합 : ' + getSum(a,b));
}
-----위의 함수를 내부 함수로 만들어서 호출해볼게!!!----------------
function print(a,b){
	function sum(a,b){
		var s = 0;
		while(a<=b) {
		       s+= a++;
		}
		return s;
	}
	alert(a + '~' + b + '사이의 총합 : ' + sum(a,b));
  }
  print(1,10); //1~10까지 숫자 합쳐서 총합 구하기
------------------>>>근데 여기서 sum함수는 프린트함수 내부에서만 호출가능



