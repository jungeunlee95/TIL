
2.AOP -aop_basic, aop01, aop02
[단일체계]
proxy프록시 서버 -> 감시하는 하나의 서버 

C□(계좌조회서비스호출) -----> P□(로그인,보안체크,로그) -----> S□(계죄조회실행)
외부에서 계좌조회서비스 메소드를 호출할때, 감시하던 프록시가 신호를 훔쳐서 수행해서 돌려줌

모든 서비스마다 공통적으로 해야할 일은 프록시가 함 (겹치는거)
 
AOP의 목적
 관심의 분리 : 공통관심사항과 핵심관심사항의 분리
 공통관심사항: 전체 시스템에서 사용되는 기능 (로그처리, 보안 ...)
 핵심관심사항: 일반 업무 프로세스(계좌조회, 이체, 등..수정 삭제 조회 등 ..)

AOP의 핵심 기술 : 
 말하지 않아도 자연스럽게 실행되도록 하는. ! ! 
 핵심 모듈의 코드를 직접 건들이지않고 필요한 기능이 동작되도록 하는 것 ! 
 핵심 모듈의 코드 사이에 공통 모듈이 동작하도록 처리
 핵심기능에 공통기능을 삽입
 - 컴파일 시점에 코드에 공통 기능 추가
 - 클래스 로딩 시점에 바이트 코드에 공통 기능 추가
 -☆실행시에 프록시 객체를 생성해 공통 기능 추가   -> spring 에서는 이거 사용 ! 
 


--------------------------aop_basic---------------------------------
Girl
Boy
AOPMain
MyAspect - 공통 관심사 묶는 클래스 
-> 복잡성을 찾아봄 
---------------------------------------------------------------------





--------------------------aop_01---------------------------------
Spring AOP의 특징
  1. 프록시 기반
  2. 인터페이스 기반
  3. 런타임 기반

핵심코드를 가지고 있는 클래스들은 무조건 인터페이스로 만들어야함 
-> Boy랑 Girl 을 무조건 인터페이스 기반으로 해서
다른 클래스에서 보이와 걸을 오버라이드한 메소드로 호출할수있게 해야함


----------------------
★☆어노테이션 기반 AOP
----------------------
XMl문서에 선언 필요 <aop:aspectj-autoproxy /> 
클래스 위쪽에  @Aspect 선언 
--------------------------
src/main/resources
aop02.xml 만듬

aop_01
MyAspect

http://mvnrepository.com/ 검색에 aspectj  . AspectJ Runtime  
AspectJ Runtime ≫ 1.9.1/ aspectjweaver    Maven  복사 -> pom.xml 붙여넣기
--> 이거 해야지 MyAspect에 @Aspect 오버라이드 할수있음
 
->XML에 객체 생성
	<bean class="aop01.MyAspect" id="myAspect" />
	<bean class="aop01.Girl" id="girl" />
	<bean class="aop01.Boy" id="boy" />
-----------------------------------------------------------------------
Joinpoint : 공통관심  모듈의 기능이 삽입되어 동작 될 수 있는 위치 메서드 호출, 필드값 변경시점 등 스프링은 메서드 호출만 가능
포인트 컷 : 어떤 클래스의 조인 포인트를 사용 할 것인지 결정
어드바이스 : 언제 공통기능이 핵심 기능에 적용할 지를 정의 -> 시점 선택 before.after... 등
Aspect : rhdxhdrlsmd( 포인트컷과 어드바이스를 합쳐놓은것)
---------------------------------------------------------------------





--------------------------aop_02---------------------------------

----------------------
★☆스키마기반 AOP
----------------------
<aop:*>에 해당하는 태그 정도
<aop:config> :AOP설정태그 중 루트, AOP 관련 설정 정보임을 나타냄
    <aop:aspect>    
         <aop:pointcut>
---------
app02.xml
---------
<aop:config>                           * 클래스이름 
	<aop:aspect ref="myAspect"> --> order="" 순서 정할 수 있음  
		<aop:before method="before" pointcut="execution(void aop02.Boy.runSomething())"/>  <!-- 핵심코드 실행 전에 before메소드 수행 할거야 -->
	</aop:aspect>
</aop:config>

---------------------------------------------------------------------




----------------------------------aop01----------------------------
@Around("execution(* runSomething())")    -> 전도 후도 아닌 사이에 
joinPoint.proceed();   -> 실행하겠다는 뜻

around -> before -> proceed핵심 -> around -> after





------------------di_test02 AOP로 만들어보기 -----------------------------
인터페이스 하나 만들고, Developer.java
핵심 전 후에 수행할 클래스 하나 만들고, MyAspect.java

LogAspect.java



































