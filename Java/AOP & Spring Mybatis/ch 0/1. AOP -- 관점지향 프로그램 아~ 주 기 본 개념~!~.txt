1. AOP --> 관점지향 프로그램 아~ 주 기 본 개념~!~

AOP 를 쓰는 목적 : 단일체계
각자 역할을 나눠서 하기 때문에 문제가 생겼을 때 단일 책임이 가능, 
 코드 수정하기도 편함 

로그인
보안
로그
--일처리-- 계좌조회, 이체, 현금, 출금, 공과금 납부
로그



void 계좌조회서비스() {
	로그인;
	보안체크;
	로그;
	★계좌조회;
	로그;
    }

void 이체() {
	로그인;
	보안체크;
	로그;
	★이체;
	로그;
    }

void 공과금납부() {
	로그인;
	보안체크;
	로그;
	★공과급납부;
	로그;
    }

... 이렇게 계속 똑같은 메소드를 반복해

각각의 메소드들은 언제 호출하는지 계속 체크 : 프록시
감시하다가 a가 호출하면 호출하는순간 자기가 뺏어서 로그인,보안체크,로그해 이렇게 일을 수행한다음에 a한테 넘겨줌
실제 조회서비스가 호출될때 그럼 로그인; 보안체크; 로그; 기능은 필요가 없어짐
--> 관점지향 프로그램 -> interface 

언제 프록시가 훔치는지 시점도 다양해요













