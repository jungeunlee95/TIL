4. component-scan @Component

 xml파일 설정을 통해 자동으로 빈으로 사용 될 객체를 등록함
   -<conyext:component-scan base-package=" " />
 지정된 패키지 하위의 모든 패키지를 스캔하여 빈으로 등록
 빈으로 등록되려면 자바 클래스에서 어노테이션을 사용해야함
  -@Component, @Controller, @Service, @Repository

설정값이 없는 경우 클래스 이름의 첫자를 소문자로 적용한 빈으로 등록
===>  Car car = context.getBean("car", Car.class); xml에 안써줘도 됨

   -<conyext:component-scan base-package="xxxx" />

-> @Component
 public class colaDrink implements Idrink 
  => <bean class="xxx.ColaDrink" id="colaDrink"/>

-> @Component("ham")
 public class Hamsandwitch implements sandwitch
  =>  <bean class="xxx.Hamsandwitch" id="ham"/>



-----------------------------di_anno03--------------------------------
di_anno03.xml

<context:component-scan base-package="di_anno03" />  -> 이 패키지를 뒤지면서 객체를 찾을거야

---------------
@Resource
---------------
만약 여러 클래스에서 다 
@Component() 했을 경우, 타입이 같은 클래스면 두개중 무슨 객체인지 모르잖아? 그럼 error야
그래서 @Component("tire") 이렇게 네임매칭을 할 수 있음	
            --> 
	주입할대상을 Car.class에서 선택할수있어 매개변수에 
	@Resource(name="nexenTire")  네임으로 매칭돼

//한국타이어는 @Component() 네임 안정해서 
    첫글자가 소문자로 시작하는 그냥 클래스이름이고, 넥센은 네임설정했으니까 설정된 네임으로




---------------
@Resource
---------------
매개변수에
	@Autowired
	@Qualifier("nexen")
	private Tire tire;

Setter는 무조건 인자가 하나밖에 안날라와서 이름 정해주면 알수있는데,
	@Autowired
	@Qualifier("koreaTire")
	public void setTire(Tire tire) {
		this.tire = tire;
		System.out.println("setTire() 메서드 호출 ...");
	}


생성자는 인자가 여러개라서 어디에 주입할지 몰라 .
그래서 @Qualifier 어노테이션을 각각 써줘야함 -> 의존주입을 할 대상 앞에다가 적어야해

	@Autowired
	public Car(@Qualifier("koreaTire")Tire tire) {
		this.tire = tire;
		System.out.println("Car(Tire) 생성자 호출 ...");
	}




























