4. beanContainer.xml 기본설정

Lecture-Spring\src/main/java/basic/
-Hello.java
-HelloMain.hjava

1. src/main/resources에 xml파일 만들기
beanContainer.xml    -> 객체 생성을 목표 
윈도우 프리풔런스 -xml - xml Files -Editor - Templates -beans-basic 에 템플릿설정하면 나중에 자동완성됨

2. <beans>안에 여러개의 <bean>태그 넣을 수 있음
<bean class="패키지 포함 클래스명" id="만들어진 객체를 표현할수있는 변수명" />


---------------
BeanFactory
---------------
HelloMain.java에서 설정해
Resource resource = new ClassPathResource("beanContainer.xml");
BeanFactory factory = new XmlBeanFactory(resource)

beanContainer.xml    
<!-- Hello hello = new Hello()  객체 만드는 패턴이 싱글턴패턴, 클래스당 객체 하나씩.-->
<bean class="basic.Hello" id="hello" />
<bean class="basic.Hello" id="hello2" />


-----------------
Container - ApplicationContext
-----------------
-빈팩토리 이외의 추가적인 기능 제공
	 : 국제화지원, 이벤트처리, 자원을 로딩하는 범용적 방법 제공
-빈팩토리와의 차이점 
	: 빈을 컨테이너에 로딩하는 시점이 컨텍스트가 시작되기 전에
	  모든 빈을 미리 로딩하여 빈이 필요할 때 바로 사용 할 수 있도록 함


--------------
Container
--------------
ClassPathXmlApplicationContext
FileSystemXmlApplicationContext

-----------------------------HelloMain01--------------------------
ApplicationContext context = new ClassPathXmlApplicationContext("beanContainer.xml");
 --> 객체생성
----------------------------------------------------
beanContainer.xml에 lazy-init ="" 명령어 
<bean class="basic.Hello" id="hello" lazy-init="true"/>
원래는 xml을 로딩하는 순간 객체가 우르르르 만들어지는데
 이 명령어 사용하면 나중에 만들어지게 시점 바꿀 수 있음
 (getBean 할때 객체를 만들겠다. )
-----------------------------------------------------
beanContainer.xml에 factory-method="getInstance" 명령어

<bean class="basic.Hello2" id="hello2" factory-method="getInstance"/>
Hello2.java 클래스 하나 만들어 
HelloMain01 에서 


------HelloMain01------------
//클래스패스랑 파일시스템이랑 둘다 아우룰수있는 것 

GenericXmlApplicationContext

























