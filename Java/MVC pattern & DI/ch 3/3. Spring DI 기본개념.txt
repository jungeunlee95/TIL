3. Spring DI 기본개념

 DI 의 목적 : 미리 만들어져 있는 객체를 관리, 객체를 가져와서 어떻게 사용할 지  
 이제는 객체를 쓸 때 new로 안만들어도 되고,
 먼저 필요한 객체가 있다면 미리 어딘가에 만들어서 보관해놓고
 필요할때마다 거기서 데이터를 하나씩 가져오는거 (서블릿컨텍스트같은느낌)

 IoC(Inversion of Control) : 제어 역행
 원래는 인스턴스의 객체 생성을 개발자가 직접 소스 상에서 처리 했지만, 개발자가 관리
  - 인스턴스의 생명주기 관리를 개발자가 아닌 컨테이너가 처리!!! - 스프링 시스템이 관리
 
 DI(Dependency Inject) : 의존 주입    **의존 : 객체간의 의존관계를 의미함. 
 -Spring에서 Ioc를 제공하는 형태 중 하나(DL,DI)
 종류(주입방식) : Setter Injection, Contructor Injection
 --> Spring에서 만든 객체를 개발자가 받아야지만 사용할 수 있음.   : 의존적


[[기존코드 작성 방식]]
-필요한 위치에서 객체 생성
-인터페이스를 홀용한 객체 생성
-별도의 조립기 클래스를 활용하여 객체 생성
[[개선 방법]]
-Spring에서 제공하는 DI활용
-★★개발자가 코드에서 직접 객체를 생성하지 않는 방식
-XMl환경 설정파일 또는 어노테이션을 이용하여 객체를 주입 
	: 야! 이자리에 스프링이 갖고있는 객체를 넣어줘!

[Container]
-Spring Container
- 스프링 프레임 워크에서 컨테이너 기능을 제공해 주는 클래스를 의미
-container : Bean클래스를 관리(삭제,생성 등) 하는 주체
-Bean : Spring에서 관리되는 클래스 객체를 나타냄
-Container초기화 방법 : 성정 정보 Xml파일을 읽고 Container에 로딩함

------------------------------------------------------------------
[Container 종류]
1. BeanFactory 추상클래스                     <BeanFactory는 거의 안쓰이고>   
 -XmlbeanFactory                                  : xml설정파일을 로딩하는 단순한 빈팩토리

★★2. ApplicationContext 추상클래스    :<이게 많이 쓰임>
 -ClassPathXmlApplicationContext     : 설정 경로로부터 Xml설정파일 로딩 
 -FileSystemXmlApplicationContext    : 지정된 파일로부터 Xml설정파일 로딩
 -XmlWebApplicationContext               : 웹어플리케이션으로부터 Xml설정파일 로딩

[Bean 클래스]
-스프링 프레임워크에 의해 LifrCycle이 관리되는 클래스
- 일반 POJO 기반의 클래스
- XML에 <bean />태그를 이용해 등록
- <bean> 태그의 속성   id와 name의 차이 : 설정될 수 있는 값에 차이가 있음
    : id - 여러개의 빈클래스를 식별하기 위한 이름 설정
	 → 자바 명명 규칙을 따름 (숫자우선안되고 "/"와 같은 특수 기호 사용 불가능
    : name - id 속성과 동일
    : class - 사용하는 빈클래스의 패키지명을 포함한 클래스 명

-----------------------------------------------------------------


