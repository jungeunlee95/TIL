  [[static]]  -  ★공유★
(static는 유일하게! 클래스당 단 1개의 공간만 만듦) -StringMain07
클래스 안에 있는 멤버변수 or 메소드에만 static 붙일 수 있음

ex)
class AAA {
  int num;
  }
AAA a = new AAA();
AAA b = new AAA();
AAA c = new AAA();
↓↓↓↓↓↓↓↓위에 객체를 만들면 밑에처럼 객체가 하나씩 만들어짐 
a□ -----> num □
b□ -----> num □
c□ -----> num □
각각의 객체가 독립적인 공간을 갖고있는 것 a를 바꿔도 b,c의 num□변수까지 바뀌지 않아

  BUT, 만약 같은 값을 갖게하고 싶으면(num2공간을 따로 만들고 싶을 때)

class AAA {
     int num; (객체당 하나)
  ★static int num2; (클래스당 하나)
  }
AAA a = new AAA();
AAA b = new AAA();
AAA c = new AAA();
↓↓↓↓↓↓↓↓위에 객체를 만들면 밑에처럼 객체가 하나씩 만들어짐 
a□ -----> num □  : a.num
b□ -----> num □  : b.num
c□ -----> num □  : c.num
->얘는객체당 num이라는 변수를 만든거

 num2는!!
AAA클래스당 num2를 1개를 만들고 싶음
AAA □ (num2□)     //AAA공간 안에 num2의 공간을 만든거야
이러면 a.num2에서 바뀐 값이 b,c에도 동일하게 적용돼서 바뀜.

--------------------
어떨 때 씀?
--------------------
사원이 입사할 때 마다 총 몇명의 사원이 증가했는지 알고싶을 경우에
static 이런거 사용함

------------------
static  nonStatic
------------------
(클래스 로딩 시 , 소프트웨어가 실행될 시)
static = 클래스 변수  -> static키워드가 붙은 변수들
  -> 클래스 당 하나의 공간만 만듦
  -> 소프트웨어가 실행되는 순간 만들어짐
  -> 차이점: nonStatic보다 빨리 만들어짐 -> 인스턴스 객체를 만들지 않아도 사용가능

(객체생성시)
nonStatic = 멤버변수  -> static키워드가 안 붙은 그 외의 변수들
  -> 인스턴스 객체당 하나씩 만듦
  -> num를 갖고있는 new(생성자)를 통해 인스턴스 객체를 만들 때 

-------------------------------------------------------------------------
Heap : new에서 객체 만들 때 마다 생성되는 객체가 있는 공간

Method Area : 상수값을 기억하는 공간
                        상수자료값의 타입을 인식할 때
                        Static키워드를 통해 생성된 변수
         -> 자기 정보를 기억해야 할 때 사용하는 정보들은 다 Method Area에 저장


-----------------------------------
사용상의 차이 ( static VS nonStatic) 
-----------------------------------
static키워드에 의해 만들어진 변수 
     -> 객체를 만들지 않아도 생성됨(참조변수가 아직없음)
     -> 참조변수로 접근할 수 X : 클래스 이름으로 접근해야함!!!!
     -> Main함수에 접근할 때는 new로 생성하지않아도 됨  클래스명.main으로 접근가능

---------------------------------------------------------------
가장 작은 단원의 클래스들을 만들고
 -> 그 클래스들은 관련이 있는 것들로 구성





