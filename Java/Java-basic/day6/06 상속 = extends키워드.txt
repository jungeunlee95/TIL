   [ 상속 ] - 중복된 애들은 상위로 올려 하나의 클래스로 싶을 때 

부모 클래스 : 상위, Super  -> 애완동물class
자식 클래스 : 하위 Sub       -> 동물의 종류class

- 확장성, 재 사용성
- 클래스 선언 시 extends 키워드 사용
    => class A extends AAA{              : 하위 클래스A에 상위클래스 AAA를 포함시키는 것   
          } 
    => A클래스는 AAA의 클래스를 상속받아서 만든 클래스임

----------
-상속 특징-
----------
 자식클래스는 부모클래스에 !!선언!! 되어 있는 멤버변수, 메소드를 자신의 것 처럼 사용할 수있다.
 단, 접근 제한자에 따라 사용여부가 달라진다. 


-------------------
super키워드   - 그림
-------------------
 다른데서 클래스 호출할 때, 상속받은 클래스는
 Dog m = new Dog();    //현재 Pet 클래스를 상속 받았다면
->하나의 Dog클래스안에, Dog메소드가 있는 공간과 Pet메소드가 있는 공간이 따로 만들어짐
                                -this.name(Dog클래스안)   -super.name(상위클래스 선언 부를때) 

---------------------------- ex)--------------------------------------------- 

두개의 클래스가 있을 때, 먹이를 준다 & 놀아주기 가 중복됨
 
 class 강아지 {                                       class 앵무새 {
     void 먹이를 준다() {                                        void 먹이를 준다() {
            강아지 사료주기 ;                                              앵무새 사료주기;
     }                                                                    }
     void 놀아주기 () {                                            void 놀아주기() {
            공원으로 산책가기;                                             말시키기;
      }                                                                   }
  }                                                                       void 단어 학습 시키기() {
                                                                                   안녕하세요 반복학습;
                                                                           }
                                                                   }
 class 고영이를 만들 때 먹이준다와 놀아주기를 계속 써줘야함 

그래서 상위 클래스 하나 만듦
 class 애완동물 {
       void 먹이를 준다 () {
         }
       void 놀아주기() {
       }
   }

class 토끼 extends 애완동뭉 {
       void 먹이를 준다 () {                      => 이 부분은 자동으로 추가됨  
         }                                                
       void 놀아주기() {                           => 이 부분은 자동으로 추가됨 
         }
       void 추가로 당근주기() {                 => 토끼class만의 메소드를 추가하면 됨
         }
   }

---------------------------- ex)--------------------------------------------- 




