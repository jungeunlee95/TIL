 [ 예외처리 ] - 어떤 임의의 문장에서 개발자가 파악하지 못한 문제가 발생해도 
                       소프트웨어가 종료되지않고, 에러를 처리 한 후 다시 실행하는 것

         보통 다 실행시 예외처리 :  에러나면 소프트웨어 종료되고 에러 고쳐야됨       
   
    [exception] = 개발자가 코드 작성하면서 발생한 문제
    - checkedException -> -컴파일 시점 : ->우리가 코드 작성하다 나오는 빨간줄 그럼 고침
                                         이 문장은 예외가 발생할 가능성이 높아
                                        에러날 가능성이 높으니 미리 예외처리로 만들어            
            
                                       - 실행시 시점 : 빨간표시 없는데 실행하니까 에러 생긴 것
    

       [error] = 시스템상 문제가 생겨서 소프트웨어가 종료된 것           
          
---------------------
  예외와 관련된 키둬드
---------------------
try         ->직접이던 간접이던 예외처리기능        
catch      ->직접이던 간접이던 예외처리기능   
finally
          --------->예외처리 기능 (A메소드가 B메소드를 호출했는데 B오류를 B가 처리)


throws     ------> 간접처리 (A메소드가 B메소드를 호출했는데 B오류를 A가 처리)
                 ------> 니가 try,catch,finally 호출해


throw       ------> 사용자 정의 예외처리 
            : 메소드 내에서 발생된 예외를 자신이 직접 처리하는 것이 아니라,
               자신을 호출한 쪽으로 예외처리를 떠넘기는 역할을 하는 키워드
형식:     public void print() throws Exception {
                                 예외가 발생할 것 같은 코드 정의
                               }
-----------
   직접처리
-----------            
일단 문제날 것 같은 문장을 주시하는 것
순서 무조건 try -> catch -> finally
 try {
   예외가 발생할 것 같은 코드 정의
  } catch (Exception e) {
       예외처리
  }  finally {    무조건 실행 }   //예외가 발생하던 발생하지 않던간에 무조건 실행하는 문장 
   =>
  try에서 예외 발생하면 catch로 가서 확인하고 에러를 처리함 그다음 finally로
  try에서 예외 발생 안하면 catch건너뛰고 바로 finally로
 
--------
throws  -> 다른 클래스로 예외 처리를 넘김 
              -> a클래스의 에러가 발생할 것 같을 때 실력이 미숙해 처리를 못할 거 같으면
                    throws로 다른 클래스로 넘겨서 해결 할 수 있도록
--------
-> ExceptionMain 05
              
           
           
         
               
            
          
           
           
                
            
                
              
             
                                                            