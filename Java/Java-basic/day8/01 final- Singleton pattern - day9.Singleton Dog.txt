     [ final ] - 최종으로 결정  : 저작권 보호 같은 것
 // 카피라이트(누가 만들었다 저작권)final : 오버라이드 금지 시켜 우리 회사의 기술이다~ 
 // 내용물, 클래스를 못 건드리게 / 함부로 고치지마!
 // 인터페이스 & 추상화 : 표준형 만들어주는 것 (회사가 바뀌어서 유지보수를 할 때
 // 표준화 할 때 거의 인터페이스 형태로 만들어줌! 추상-다중 상속이 안돼서 큰 사업일 땐 별로
 // 인터페이스(오직 추상클래스,추상메소드)   추상화(추상클래스와 보통클래스,구현된메소드) 
 // JDK 1.8.5버전부터 인터페이스 메소드 앞에 default쓰면 구현된 메소드를 추가 할 수 있음 
         -> 이미 만들어진 인터페이스에 추가 해야 할 때 만 사용, 처음부터 default를 쓰면 X
                                      
 1. 변수  : 상수  : 변수에 붙으면 값 못바꿈
 2. 메소드 : 오버라이딩 금지 : 메소드에 붙으면 메소드 수정 불가능
 3. 클래스 : 상속금지 : 클래스앞에 붙으면 상속 못하게 만들어줌
                
  public static final int Min VOLUMe = 0 ;
                   
-------------------------------------------------------
 객체를 하나만 만들고 싶을 때도 final  - Singleton pattern 
------------------------------------------------------- 
  Dog 함수에서 
   난 다른데서 객체 만들지 않고도 객체를 만들고, 그 객체를 누가 호출 할 때 마다 
   무조건! 내가 먼저 만들었던 객체만 주는거야 -> return instance
   ex)
   private static final Dog instance = new Dog();
	public static Dog getInstance() { 
		
		return instance;
	}   
      이렇게 설정해주고,

  Main에서 
 	Dog d = Dog.getInstance();
	Dog d2 = Dog.getInstance();

  아무리 Dog인스턴스를 계속 호출해도, 같은 객체를 계속 말하는 거임 Dog한마리를!!!
  
        
  


          
            
           
                   
                
                    
                      
                      
                    
                   
                       
                    
                
               
                     
                             
                        
                      
                     







 