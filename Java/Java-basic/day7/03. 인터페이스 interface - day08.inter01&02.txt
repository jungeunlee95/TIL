   [[ 인터페이스 ]] - 다중 상속이 받고 싶을 때 씀
     interface ServerConstants{ } 로 선언
    -> 클래스가 인터페이스를 상속 할 경우에는 
        [[implements]] 키워드를 사용함 
     ->인터페이스 상속받는 하위 클래스는 반드시 인터페이스의 추상메소드를 오버라이딩해야함,
     -> 접근제한자도 같은 public으로 변경해줘야함

                 만약에! 인터페이스가 인터페이스 받을 땐?  extends!!!!
                 -같은 타입끼리 받을 때는 extends라고 생각 하면 됨


 [클래스] 목적 : 눈에 보이는 사물을 만드는 게 목적

 ↔차이점↔

 [인터페이스] : 객체를 만드는게 목적이 아니라, 동작들을 구분하기 위해서 = 다중상속을 위해서
                  = 추상 메소드 들의 집합임( 멤버변수는 X 만약 멤버변수 있으면 걔는 클래스인거임)
                 = final로 구성된 상수 값만 갖고있음
  ex) 이 복합기는 출력기능와 수신기능이 합해져있는거야! 이렇게 기능들을 구분하기 위해서
                 = 형용사 형태를 많이 쓴다. 
                 = 인터페이스에서 선언되는 변수는 모두 상수로 적용됨!!!! 
                    -> 자기가 알아서 자동으로 상수로 적용시켜쥼 => 접근제한자가 전부 public!!!

-----------------------------------------------------------------------------

 class 팩스 {
   수신한다 ();
   송신한다();
  }

 class 스캐너 {
   스캔한다();
  }

 class 프린터 {
   출력한다();
  } 

이런게 있을 때. 

//프린터와 팩스를 합친 복합기


 class 복합기 extends 팩스,프린트 {
 }   이게 불가능함
-----------------------------------------------------------------------------
 class 복합기 01 {
  출력한다();
  송신한다();
  수신한다();
 }

 class 복합기02 {
  출력한다();
  스캔한다();
  }

 class 복합기 03 {
  출력한다();
  송신한다();
  수신한다();
  스캔한다();
  } 
 이렇게 했을 때 출력한다를 다른걸로 바꾸면 복합기 1,2,3 각각 다 일일이 값을 변경해줘야함
 => 그래서 나온 게 바로바롱 !인터페이스!
 ----------------------------------------------------------------------------

 


 




