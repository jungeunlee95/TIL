 [ 추상클래스 : abstract ]  - 변화를 둔감하게 (프로그램 짤때 추상클래스or인터페이스 필수)
  : 유지보수를 하는 과정에서, 중간에 수정을해도 앞 뒤 클래스에 에러가 나지 않도록
  : 상속을 사용할때 추상클래스는 강제성을 갖고있음 ( 상속 사용할 때는 꼭 추상클래스)
 
   자바 : 단일상속만 지원해줌. 한명의 자식이 가질 수 있는 부모는 무조건 하나

인터페이스 -> 추상클래스 -> 추클 상속돼서 구현하는 클래스 이렇게 일반적으로 만듦

★추상클래스★ : 하나 이상의 추상 메소드를 갖고있는 클래스 
                      : 추상메소드가 필요하기 때문에 추상 클래스를 만든 것
                      : 인스턴스 생성이 불가능함 - new키워드 사용이 불가능함
                      : 추상클래스는 일반 메소드와 추상 메소드 모두 선언이 가능함.
                      : 추상클래스의 객체변수는 하위클래스를 이용함
                         ex) AD num = new D();  -> 부모 AD가 D의 참조변수를 가질 수 있음

★추상메소드★ : 내용물을 갖고있지 않고, 행동을 지칭할 때의 메소드의 이름 
                      : 메소드의 선언부만있고 바디({ }) 가 없음
                            추상메소드 형태 :  abstract void print();     {}이거 없음 바로 ; 
                         ex)"집은 몇평이고, 한방은 몇평으로해"가 아니라, 
                                방 세 개와 화장실 두 개가 있어야 돼.같은거

만약에 그냥 class D가 추상클래스 A를 상속받으려면,
D에서 추상메소드가 있으면 객체를 만들 수 없기 때문에, 오버라이딩 해야함
부모클래스 추상메소드에 내용을 추가해서 사용 -> 오버라이딩

---------
형태
---------
추상 클래스를 상속받은 하위 클래스는 상위클래스의 추상 메소드를 꼭! 오버라이딩(재정의)해야함
abstract class Test {
    abstract void print();
    }

class A extends Test {
     void print () {
              dfsfgegsgege    ->오버라이드 : 부모의 추상 메소드를 자식에서 똑같은 이름으로 
       }                                                    구현된 메소드로 내용을 다르게.

----------
생성자
----------
 class Person {
     머리색
     눈색
   }
 
 Maind PersonMain {
  person Tom = new Person();     ->그냥 이렇게하면 아무것도 없는 사람 형태 
  Person Sally = new Person ( 검정, 갈색);
                           ->생성자가 멤버변수 설정해서 이런 걸 만들어라.
                           -> 그럼 이 때 그 사람의 특징이 생기는 것
      

